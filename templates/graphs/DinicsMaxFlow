public class DinicMaxFlow {
    int V; // number of edges

    int[] level; // stores levels of nodes

    ArrayList<Edge>[] adj;
    int numSteps;

    int totalFlow = 0;

    public DinicMaxFlow(int V) {
        adj = new ArrayList[V];
        this.V = V;
        for (int i = 0; i < V; i++) {
            adj[i] = new ArrayList<>();
        }
        level = new int[V];
    }

    void addEdge(int u, int v, int C) {
        Edge a = new Edge(v, 0, C, adj[v].size());
        Edge b = new Edge(u, 0, 0, adj[u].size());
        adj[u].add(a);
        adj[v].add(b);
    }

    public boolean bfs(int s, int t) {
        for (int i = 0; i < V; i++) {
            level[i] = -1;
        }

        level[s] = 0;

        Queue<Integer> q = new LinkedList<>();
        q.add(s);
        while (!q.isEmpty()) {
            int u = q.remove();
            for (int i = 0; i < adj[u].size(); i++) {
                Edge e = adj[u].get(i);
                if (level[e.v] < 0 && e.flow < e.C) {
                    level[e.v] = level[u] + 1;
                    q.add(e.v);
                }
            }
        }
        return level[t] < 0 ? false : true;
    }


    public int sendFlow(int u, int flow, int t, int[] start) {
        if (u == t)
            return flow;

        for (; start[u] < adj[u].size(); start[u]++) {
            Edge e = adj[u].get(start[u]);
            if (level[e.v] == level[u] + 1 && e.flow < e.C) {
                int curr_flow = Math.min(flow, e.C - e.flow);

                int temp_flow = sendFlow(e.v, curr_flow, t, start);

                if (temp_flow > 0) {
                    e.flow += temp_flow;

                    adj[e.v].get(e.rev).flow -= temp_flow;
                    return temp_flow;
                }
            }
        }

        return 0;
    }

    public int maxFlow(int s, int t) {
        if (s == t)
            return -1;

        int total = 0;

        while (bfs(s, t)) {
            int[] start = new int[V + 1];
            int flow;
            while ((flow = sendFlow(s, Integer.MAX_VALUE / 2, t, start)) != 0) {
                total += flow;
            }
        }

        totalFlow += total;
        return total;
    }

    public int[] getStep(int step, int boardStepSize, int boardSize) {

        int offSet = (boardStepSize * step) + 1;
        ArrayList<Integer> list = new ArrayList<>();
        for (int i = 0; i < boardSize; i++) {
            for (int j = 0; j < boardSize; j++) {
                int node = offSet + (i * boardSize * 2) + (j * 2);
                for (int eNum = 0; eNum < adj[node].size(); eNum++) {
                    Edge edge = adj[node].get(eNum);
                    if (edge.C == 1 && edge.flow == 1) {
                        // if flow == 1 there is a dancer at this time step
                        int ni = -1;
                        int nj = -1;
                        if (edge.v == node + boardStepSize - 1) {
                            // dancer goes nowhere
                            // Do nothing
                            ni = i;
                            nj = j;
                        } else if (edge.v == node + boardStepSize - 1 - 2) {
                            //dancer goes left
                            ni = i;
                            nj = j - 1;
                        } else if (edge.v == node + boardStepSize - 1 + 2) {
                            // dancer goes to right
                            ni = i;
                            nj = j + 1;
                        } else if (edge.v == node + boardStepSize - 1 - (boardSize * 2)) {
                            //dancer goes up
                            ni = i - 1;
                            nj = j;
                        } else if (edge.v == node + boardStepSize - 1 + (boardSize * 2)) {
                            // dancer goes down
                            ni = i + 1;
                            nj = j;

                        }

                        list.add(i);
                        list.add(j);
                        list.add(ni);
                        list.add(nj);

                    }
                }


            }
        }

        int[] ret = new int[list.size()];
        for (int i = 0; i < list.size(); i++)
            ret[i] = list.get(i);

        return ret;

    }


    public void resetRevEdges() {
        for (int i = 0; i < V; i++) {
            ArrayList<Edge> list = adj[i];
            for (int j = 0; j < list.size(); j++) {
                Edge e = list.get(j);
                if (e.C == 0)
                    e.flow = 0;
            }
        }

    }

    public static void main(String[] args) {
        DinicMaxFlow g = new DinicMaxFlow(6);
        g.addEdge(0, 1, 16);
        g.addEdge(0, 2, 13);
        g.addEdge(1, 2, 10);
        g.addEdge(1, 3, 12);
        g.addEdge(2, 1, 4);
        g.addEdge(2, 4, 14);
        g.addEdge(3, 2, 9);
        g.addEdge(3, 5, 20);
        g.addEdge(4, 3, 7);
        g.addEdge(4, 5, 4);
        System.out.println("Max flow " + g.maxFlow(0, 5));


    }
}

class Edge {
    int v;

    int flow;

    int C;// capacity

    int rev; // index of reverse edge

    public Edge(int v, int flow, int C, int rev) {
        this.v = v;
        this.flow = flow;
        this.C = C;
        this.rev = rev;
    }
}